(define (domain keva)
  (:requirements :strips :typing :conditional-effects)
  
  (:types robot plank orientated region location)
  (:predicates
  		   (onTable ?p - plank)
  		   (inBuffer ?p - plank)
  		   (onSinglePlank ?p1 - plank ?p2 - plank)
           (onDoublePlank ?p1 - plank ?p2 - plank ?p3 - plank)
           (clearPlank ?p - plank)
  		   (handempty)
             (completed)
  		   (inGripper ?p - plank)
  		   (orientation ?p - plank ?o - orientated)
           (placed ?p - plank)
           (human_placed ?p - plank ?loc - location)
           (free ?loc - location))


  (:action pickUp_plank
  		 :parameters (?rob - robot ?p - plank ?loc - location)
  		 :precondition (and (handempty)
                            (clearPlank ?p)
                            (or (human_placed ?p ?loc)(inBuffer ?p)))
  		 :effect (and (not (handempty))
                      (inGripper ?p)
                      (not (clearPlank ?p))
                      (not (onTable ?p))
                      (when (human_placed ?p ?loc) (not (human_placed ?p ?loc)))
                      (when (not (free ?loc))(and (free ?loc)))
                      (when (inBuffer ?p)(and (not (inBuffer ?p))))
                      (forall (?pl - plank)
                            (when (and (onSinglePlank ?p ?pl)
                                       (not (= ?p ?pl)))
                                  (and (not(onSinglePlank ?p ?pl))
                                       (clearPlank ?pl)))))
  )



  (:action putDown_plank_onTable
  		 :parameters (?rob - robot ?p - plank ?o - orientated)
  		 :precondition (and (not (handempty))
                            (inGripper ?p)
                            (not (placed ?p))
                            (or (= ?o vertical) (= ?o sideways))
                        )
  		 :effect (and (handempty)
                      (onTable ?p)
                      (clearPlank ?p)
                      (orientation ?p ?o)
                      (not (inGripper ?p))
                      (placed ?p))
  )

  (:action putDown_plank_onPlank
  		 :parameters (?rob - robot ?p1 - plank ?p2 - plank ?o - orientated)
  		 :precondition (and (not (handempty))
                          (inGripper ?p1)
                          (not (= ?p1 ?p2))
                          (not (placed ?p1))
                          (placed ?p2))
  		 :effect (and (handempty)
                      (onSinglePlank ?p1 ?p2)
                      (not (clearPlank ?p2))
                      (orientation ?p1 ?o)
                      (not (inGripper ?p1))
                      (clearPlank ?p1)
                      (placed ?p1))
  )

  (:action putDown_plank_onDoublePlank
  		 :parameters (?rob - robot ?p1 - plank ?p2 - plank ?p3 - plank ?o - orientated)
  		 :precondition (and (not (handempty))
                            (inGripper ?p1)
                            (not (= ?p1 ?p2))
                            (not (= ?p1 ?p3))
                            (not (= ?p2 ?p3))
                            (not (= ?o vertical))
                            (not (placed ?p1))
                            (placed ?p2)
                            (placed ?p3)
                            (or
                                (and (orientation ?p2 horizontal)
                                     (orientation ?p3 horizontal))
                                (and (orientation ?p2 vertical)
                                     (orientation ?p3 vertical))
                                (and (orientation ?p2 sideways)
                                     (orientation ?p3 sideways))))
  		 :effect (and (handempty)
                      (not (inGripper ?p1))
                      (onDoublePlank ?p1 ?p2 ?p3)
                      (orientation ?p1 ?o)
                      (not (clearPlank ?p2))
                      (not (clearPlank ?p3))
                      (clearPlank ?p1)
                      (placed ?p1))
  )



  (:action human_place
    :parameters (?p - plank ?l - location)
    :precondition (and (handempty)
          (free ?l)
    )
    :effect (and
        (human_placed ?p ?l)
        (not (free ?l))
        (clearPlank ?p)
    )
  )

)